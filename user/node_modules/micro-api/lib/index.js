'use strict';

var _extends = Object.assign || function (target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i]; for (var key in source) { if (Object.prototype.hasOwnProperty.call(source, key)) { target[key] = source[key]; } } } return target; };

function _asyncToGenerator(fn) { return function () { var gen = fn.apply(this, arguments); return new Promise(function (resolve, reject) { function step(key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { return Promise.resolve(value).then(function (value) { step("next", value); }, function (err) { step("throw", err); }); } } return step("next"); }); }; }

require('babel-polyfill');

var pathMatch = require('path-match');

var _require = require('micro'),
    json = _require.json,
    send = _require.send;

var configureRouter = function configureRouter(routes) {
  var pathMatcher = pathMatch();

  routes = routes.map(function (route) {
    var matcher = pathMatcher(route.path);
    var method = route.method.toUpperCase();

    return _extends({}, route, { matcher: matcher, method: method });
  });

  var lookup = function lookup(url, method) {
    method = method.toUpperCase();

    var params = false;

    var route = routes.find(function (route) {
      if (route.method !== method) {
        return false;
      }
      params = route.matcher(url);
      return !!params;
    });

    if (route && params) {
      route = _extends({}, route, { params: params });
    }

    return route;
  };

  return lookup;
};

var debug = function debug(message) {
  if (process.env.NODE_ENV === 'development') {
    console.error(message);
  }
};

var sendPageNotFound = function sendPageNotFound(req, res) {
  var message = req.method + ' ' + req.url + ' not found';
  debug(message);
  return send(res, 404, { message: message });
};

var microApi = function microApi(routes) {
  var lookup = configureRouter(routes);

  return function () {
    var _ref = _asyncToGenerator(regeneratorRuntime.mark(function _callee(req, res) {
      var route, reqBody, resBody, message, stack, statusCode, code;
      return regeneratorRuntime.wrap(function _callee$(_context) {
        while (1) {
          switch (_context.prev = _context.next) {
            case 0:
              route = lookup(req.url, req.method);

              if (route) {
                _context.next = 3;
                break;
              }

              return _context.abrupt('return', sendPageNotFound(req, res));

            case 3:
              _context.prev = 3;
              reqBody = void 0;
              _context.prev = 5;
              _context.next = 8;
              return json(req);

            case 8:
              reqBody = _context.sent;
              _context.next = 14;
              break;

            case 11:
              _context.prev = 11;
              _context.t0 = _context['catch'](5);

              reqBody = {};

            case 14:
              _context.next = 16;
              return route.handler({
                res: res,
                req: req,
                body: reqBody,
                params: route.params,
                headers: req.headers
              });

            case 16:
              resBody = _context.sent;


              // If there's a response return it
              if (resBody) {
                send(res, 200, resBody);
                // If there's no response treat it as missing
              } else {
                sendPageNotFound(req, res);
              }
              _context.next = 26;
              break;

            case 20:
              _context.prev = 20;
              _context.t1 = _context['catch'](3);
              message = _context.t1.message, stack = _context.t1.stack, statusCode = _context.t1.statusCode;
              code = statusCode || 500;

              debug(_context.t1);
              send(res, code, { message: message, stack: stack, code: code });

            case 26:
            case 'end':
              return _context.stop();
          }
        }
      }, _callee, undefined, [[3, 20], [5, 11]]);
    }));

    return function (_x, _x2) {
      return _ref.apply(this, arguments);
    };
  }();
};

module.exports = microApi;