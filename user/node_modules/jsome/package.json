{
  "_args": [
    [
      {
        "raw": "jsome@^2.3.25",
        "scope": null,
        "escapedName": "jsome",
        "name": "jsome",
        "rawSpec": "^2.3.25",
        "spec": ">=2.3.25 <3.0.0",
        "type": "range"
      },
      "/home/software1/microservices/microjs-master-avasani/user/node_modules/micro-visualize"
    ]
  ],
  "_from": "jsome@>=2.3.25 <3.0.0",
  "_id": "jsome@2.3.26",
  "_inCache": true,
  "_location": "/jsome",
  "_nodeVersion": "6.9.2",
  "_npmOperationalInternal": {
    "host": "packages-18-east.internal.npmjs.com",
    "tmp": "tmp/jsome-2.3.26.tgz_1487021253288_0.7007231032475829"
  },
  "_npmUser": {
    "name": "javascript",
    "email": "Array.prototype@gmail.com"
  },
  "_npmVersion": "3.10.9",
  "_phantomChildren": {},
  "_requested": {
    "raw": "jsome@^2.3.25",
    "scope": null,
    "escapedName": "jsome",
    "name": "jsome",
    "rawSpec": "^2.3.25",
    "spec": ">=2.3.25 <3.0.0",
    "type": "range"
  },
  "_requiredBy": [
    "/micro-visualize"
  ],
  "_resolved": "https://registry.npmjs.org/jsome/-/jsome-2.3.26.tgz",
  "_shasum": "8cb4438924d2c9dd5294c90adf03f35414fb3ca9",
  "_shrinkwrap": null,
  "_spec": "jsome@^2.3.25",
  "_where": "/home/software1/microservices/microjs-master-avasani/user/node_modules/micro-visualize",
  "author": {
    "name": "Khalid REHIOUI",
    "email": "Array.prototype@gmail.com",
    "url": "http://github.com/javascipt"
  },
  "bin": {
    "jsome": "./bin/cli.js"
  },
  "bugs": {
    "url": "https://github.com/Javascipt/Jsome/issues"
  },
  "dependencies": {
    "chalk": "^1.1.3",
    "json-stringify-safe": "^5.0.1",
    "yargs": "^4.8.0"
  },
  "description": "Make your JSON look AWESOME!",
  "devDependencies": {},
  "directories": {},
  "dist": {
    "shasum": "8cb4438924d2c9dd5294c90adf03f35414fb3ca9",
    "tarball": "https://registry.npmjs.org/jsome/-/jsome-2.3.26.tgz"
  },
  "gitHead": "c5fb67e826e457f802c16ec87e3994155b1327dd",
  "homepage": "https://github.com/Javascipt/Jsome#readme",
  "keywords": [
    "colors",
    "json",
    "console",
    "log",
    "format",
    "pretty",
    "print",
    "command-line",
    "command",
    "cli"
  ],
  "license": "MIT",
  "main": "script.js",
  "maintainers": [
    {
      "name": "javascript",
      "email": "Array.prototype@gmail.com"
    }
  ],
  "name": "jsome",
  "optionalDependencies": {},
  "readme": "Make your JSON objects look AWESOME!\n====================================\n\n![Jsome](https://api.travis-ci.org/Javascipt/Jsome.svg)\n![Jsome](https://david-dm.org/Javascipt/Jsome.svg)\n![Jsome](https://img.shields.io/npm/dm/jsome.svg)\n\n![Downloads stats](https://nodei.co/npm/jsome.png?downloadRank=true&stars=true)\n\n![Jsome](https://raw.githubusercontent.com/Javascipt/Jsome/master/logo.png)\n\nThis package allows you to give style to your JSON on your console!\n\n## Installation :\n\n```bash\n  $ npm install jsome\n```\n\nif you need to use jsome as a command line, you may need to instal it globally\n\n```bash\n  $ [sudo] npm install -g jsome\n```\n\n## How does it work ?\n\n#### Command line :\n\nUsing jsome as a command line, you need to run the following command that takes the path to your json file as argument\n\n```bash\n  $ jsome /path/to/your/json/file.json\n  $ jsome [options] /path/to/your/json/file.json\n```\n\nThe options available are :\n- `-c`: to enable or disable colors (defualt value: true)\n- `-l`: to enable or disable levels (default value: false)\n- `-s`: to specify the number of tabulation spaces (default value: 2)\n\nexamples :\n\n```bash\n  $ jsome -c false /path/to/your/file.json\n  $ jsome -c false -l true /path/to/your/file.json\n  $ jsome -s 4 /path/to/your/file.json\n```\n\n##### Module :\n\nOn your nodejs application, when you need to console.log a json object, all you need to do is to use the jsome function\n\n```javascript\n    var jsome = require('jsome');\n    jsome([{\"id\":1,\"email\":\"Khalid@Morocco.ma\",\"active\":true},{\"id\":2,\"email\":\"Someone@somewhere.com\",\"active\":false},{\"id\":3,\"email\":\"chinese@bamboo.tree\",\"active\":true}]);\n```\n\nThen your json object will be displayed on the console in a pretty format with Awsome colors !\nHere is the result :\n\n![jsome](https://raw.githubusercontent.com/Javascipt/Jsome/master/examples/example1.png)\n\nThe `jsome` function returns the object passed as argument so that when debugging, you can print the value of an object without having to change a lot on your code\n\n```javascript\n\n    // instead of \n    \n    var foo = {\n      bar : obj\n    }\n    jsome (obj);\n    \n    // you can do this :\n    \n    var foo = {\n      bar : jsome(obj)\n    }\n    \n```\n\nYou can add some points to show levels of elements... very helpful when you are dealing with complex json objects\n\n```javascript\n    jsome.level.show = true;\n```\n\n![jsome](https://raw.githubusercontent.com/Javascipt/Jsome/master/examples/example2.png)\n\nThe object `jsome.level` has as default value the following json :\n\n```javascript\n  jsome.level = {\n      'show'    : false\n    , 'char'    : '.'\n    , 'color'   : 'red'\n    , 'spaces'  : 2\n    , 'start'   : 0\n  }\n```\n\nYou can change the level char, its color ( [see chalk package](http://npmjs.org/package/chalk) ) and the number of spaces for each level.\n\nYou can also display your json starting from a specific level to avoid displaying your json starting from the extreme left. You can do that by changing the value `jsome.level.start`.\n\nYou can configure the colors of the displayed json by changing the values of the `jsome.colors` object which has as default these values.\n\n```javascript\n  jsome.colors = {\n      'num'   : 'cyan'    // stands for numbers\n    , 'str'   : 'magenta' // stands for strings\n    , 'bool'  : 'red'     // stands for booleans\n    , 'regex' : 'blue'    // stands for regular expressions\n    , 'undef' : 'grey'    // stands for undefined\n    , 'null'  : 'grey'    // stands for null\n    , 'attr'  : 'green'   // objects attributes -> { attr : value }\n    , 'quot'  : 'yellow'  // strings quotes -> \"...\"\n    , 'punc'  : 'yellow'  // commas seperating arrays and objects values -> [ , , , ]\n    , 'brack' : 'yellow'  // for both {} and []\n  }\n```\n\nYou can not only use the color value as string but also you can use an array to specify the background color or you can make things look bold  ( [see chalk package for more details](http://npmjs.org/package/chalk) )\n\n\n```javascript\n  jsome.colors.bool  = ['green' , 'bgRed']\n  jsome.colors.attr  = ['green' , 'bold']\n  jsome.colors.quot  = ['yellow', 'bold']\n  jsome.colors.punc  = ['yellow', 'bold']\n  jsome.colors.brack = ['yellow', 'bold']\n```\n![jsome](https://raw.githubusercontent.com/Javascipt/Jsome/master/examples/example3.png)\n\n\nWhen you have a json as a string, instead of passing by `JSON.parse` function, you can just call the parse function of jsome\n\n```javascript\n  jsome(JSON.parse('[1,2,3]'));\n```\n\nbecomes:\n\n```javascript\n  jsome.parse('[1,2,3]');\n```\n\nIf you need to disable the colors:\n\n```javascript\n  jsome.params.colored = false;\n```\n\nWhen you have a very long json to display, don't make your code blocking... you can enable the asynchronous mode.\n\n```javascript\n  jsome.params.async = true;\n\n  jsome(longJson, function () {\n      /* Your code here */\n  });\n```\n\nThe default value of `params` is:\n\n```javascript\n  jsome.params = {\n      'colored' : true\n    , 'async'   : false\n  }\n```\n\nIn order to get the colored string without printing it on the console :\n\n```javascript\n   var coloredString = jsome.getColoredString(obj)\n```\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/Javascipt/Jsome.git"
  },
  "scripts": {},
  "version": "2.3.26"
}
